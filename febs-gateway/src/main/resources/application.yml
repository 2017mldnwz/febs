server:
  port: 8301
  
spring:
  application:
    name: FEBS-Gateway
  autoconfigure:
    exclude: org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration #因为我们在febs-common模块里引入了mybatis-plus-boot-starter，该starter包含数据库自动装配配置，
                                                                                    #而febs-gateway、febs-server-system和febs-server-test模块并没有配置数据库，所以我们需要在它们的配置文件application.yml里添加如下配置来关闭数据库自动装配
    
eureka:
  instance:
    lease-renewal-interval-in-seconds: 20 #向Eureka 服务端发送心跳的间隔时间，单位为秒，用于服务续约。这里配置为20秒，即每隔20秒向febs-register发送心跳，表明当前服务没有宕机
  client:
    register-with-eureka: true #为true时表示将当前服务注册到Eureak服务端
    fetch-registry: true #为true时表示从Eureka 服务端获取注册的服务信息
    instance-info-replication-interval-seconds: 30 #新实例信息的变化到Eureka服务端的间隔时间，单位为秒
    registry-fetch-interval-seconds: 3 #默认值为30秒，即每30秒去Eureka服务端上获取服务并缓存，这里指定为3秒的原因是方便开发时测试，实际可以指定为默认值即可
    serviceUrl:
      defaultZone: http://febs:123456@localhost:8001/register/eureka/ #指定Eureka服务端地址
   
   
#这一段配置意思是，所有以/auth开头的请求都会被转发到名称为FEBS-Auth的服务上，
#由于我们需要在请求头中携带令牌，所以sensitiveHeaders设置为*，表示不过滤请求头信息，即请求的请求头信息将原封不动的转发出去。
zuul:
  routes:
    auth:
      path: /auth/**
      serviceId: FEBS-Auth
      sensitiveHeaders: "*"
    system:
      path: /system/**
      serviceId: FEBS-Server-System
      sensitiveHeaders: "*"
    test:
      path: /test/**
      serviceId: FEBS-Server-Test
      sensitiveHeaders: "*"
  retryable: true  #设置为true时，表示开启重试机制
  ignored-services: "*" #Zuul配合Eureka后会有一套默认的配置规则，这里我们只想请求根据我们显示配置的路由规则走，所以设置为*，表示关闭所有默认路由配置规则
  ribbon:
    eager-load:
      enabled: true  #Zuul内部通过Ribbon按照一定的负载均衡算法来获取服务，Ribbon进行客户端负载均衡的Client并不是在服务启动的时候就初始化好的，而是在调用的时候才会去创建相应的Client，所以第一次调用的耗时不仅仅包含发送HTTP请求的时间，还包含了创建RibbonClient的时间，这样一来如果创建时间速度较慢，同时设置的超时时间又比较短的话，第一次请求很容易出现超时的情况。设置为true的时候表示开启Ribbon的饥饿加载模式，即在应用启动的时候就去获取相应的Client备用。
  SendErrorFilter:
    error:
      disable: true #要让我们自定义的Zuul异常过滤器生效，还需要在febs-gateway的配置文件中添加如下配置，让默认的异常过滤器失效
ribbon:
  ReadTimeout: 3000 #设置请求超时时间，单位为毫秒；如果有警告是编译器的问题
